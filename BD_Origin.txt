select * from Capacidad_Tamanio

/*CREACION DE TABLAS INDIVIDUALES PARA EL PRODUCTO*/
/*-----------------------------------------------*/
CREATE TABLE Tipo_Producto (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA TIPO_PRODUCTO*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarTipoProducto(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Tipo_Producto WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Tipo_Producto (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarTipoProducto(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Tipo_Producto WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Tipo_Producto SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarTipoProducto(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Tipo_Producto = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Tipo_Producto WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Tipo de producto eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El tipo de producto está relacionado a uno o más productos'; 
    END IF;
END //
/*----------------------------------------------------------*/

CREATE TABLE Marca (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA MARCA*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarMarca(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Marca WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Marca (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarMarca(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Marca WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Marca SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarMarca(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Marca = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Marca WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Tipo de producto eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El tipo de producto está relacionado a uno o más productos'; 
    END IF;
END //
/*----------------------------------------------------------*/

CREATE TABLE Capacidad_Tamanio (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);
/*PROCEDIMIENTOS ALMACENADOS PARA TABLA CAPACIDAD_TAMANIO*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarCapacidad_Tamanio(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Capacidad_Tamanio WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Capacidad_Tamanio (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarCapacidad_Tamanio(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Capacidad_Tamanio WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Capacidad_Tamanio SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarCapacidad_Tamanio(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Capacidad_Tamanio = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Capacidad_Tamanio WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Capacidad eliminada exitosamente'; 
    ELSE
        SET p_Mensaje = 'La Capacidad está relacionada a uno o más productos'; 
    END IF;
END //

select * from Capacidad_Tamanio
/*----------------------------------------------------------*/

CREATE TABLE Modelo (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA MODELO*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarModelo(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Modelo WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Modelo (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarModelo(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Modelo WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Modelo SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarModelo(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Modelo = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Modelo WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Modelo eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El Modelo está relacionado a uno o más productos'; 
    END IF;
END //

select * from Modelo
/*----------------------------------------------------------*/

CREATE TABLE Tipo_Componente (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA TIPO COMPONENTE*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarTipoComponente(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Tipo_Componente WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Tipo_Componente (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarTipoComponente(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Tipo_Componente WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Tipo_Componente SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarTipoComponente(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Tipo_Componente = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Tipo_Componente WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Tipo de Componente eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El Tipo de Componente está relacionado a uno o más productos'; 
    END IF;
END //

select * from Tipo_Componente;
/*----------------------------------------------------------*/


/*CREACION DE TABLAS INDIVIDUALES PARA EL RESTO*/

CREATE TABLE ROL (
    IdRol INT PRIMARY KEY AUTO_INCREMENT,
    Descripcion VARCHAR(50)
);

CREATE TABLE PERMISO (
    IdPermiso INT PRIMARY KEY AUTO_INCREMENT,
    IdRol INT,
    NombreMenu VARCHAR(100),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdRol) REFERENCES ROL(IdRol)
);

/* ******************************************************************************************* */
CREATE TABLE PROVEEDOR (
    IdProveedor INT PRIMARY KEY AUTO_INCREMENT,
    Documento VARCHAR(50) NULL,
    TipoDocumento VARCHAR(50) NULL,
    RazonSocial VARCHAR(50) NOT NULL,
    Telefono VARCHAR(50) NULL,
    Estado BIT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP
);

select * from PROVEEDOR
INSERT INTO PROVEEDOR(Documento,TipoDocumento,RazonSocial,Telefono,Estado)
VALUES('1325896','CI','Manuel CVervantes','75664059',0)
select IdProveedor,Documento,TipoDocumento,RazonSocial,Telefono,Estado from PROVEEDOR

/* PROCEDIMIENTOS PARA INSERTAR PROVEEDORES */
DELIMITER //
CREATE PROCEDURE InsertarProveedores(
	IN p_Documento VARCHAR(50),
    IN p_TipoDocumento VARCHAR(50),
    IN p_RazonSocial VARCHAR(50),
    IN p_Telefono VARCHAR(50),
    IN p_Estado BIT,
    OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PROVEEDOR WHERE Documento = p_Documento; -- Verifica si ya existe un proveedor con el mismo Documento
    IF resultado_temp = 0 THEN
		INSERT INTO PROVEEDOR(Documento,TipoDocumento,RazonSocial,Telefono,Estado)
		VALUES(p_Documento,p_TipoDocumento,p_RazonSocial,p_Telefono,p_Estado);
    
		SET p_Resultado = LAST_INSERT_ID();
		SET p_Mensaje = 'Proveedor Insertado Correctamente';
    ELSE
		SET p_Mensaje = 'El Proveedor con el mismo Documento ya existe';
    END IF;
END //

/*PROCEDIMIENTO PARA EDITAR PROVEEDOR*/
DELIMITER //
CREATE PROCEDURE EditarProveedor(
    IN p_IdProveedor INT,
    IN p_NuevoDocumento VARCHAR(50),
    IN p_NuevoTipoDocumento VARCHAR(50),
    IN p_NuevaRazonSocial VARCHAR(50),
    IN p_NuevoTelefono VARCHAR(50),
    IN p_NuevoEstado BIT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp BIT;
    SET p_Resultado = 1;

    -- Verificar si ya existe un proveedor con el mismo Documento, excluyendo el proveedor actual
    SELECT CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE 1 
    END INTO resultado_temp 
    FROM PROVEEDOR 
    WHERE Documento = p_NuevoDocumento AND IdProveedor != p_IdProveedor;

    IF resultado_temp = 0 THEN
        -- Actualizar los datos del proveedor si no hay conflictos
        UPDATE PROVEEDOR
        SET Documento = p_NuevoDocumento,
            TipoDocumento = p_NuevoTipoDocumento,
            RazonSocial = p_NuevaRazonSocial,
            Telefono = p_NuevoTelefono,
            Estado = p_NuevoEstado
        WHERE IdProveedor = p_IdProveedor;
        
        SET p_Mensaje = 'Proveedor modificado correctamente.';
    ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'Ya existe un proveedor con el mismo Documento.';
    END IF;
END //

/* PROCEDIMIENTO ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarProveedor(
    IN p_IdProveedor INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    -- Verificar si el proveedor está relacionado con alguna compra
    SELECT COUNT(*) INTO resultado_temp 
    FROM COMPRA 
    WHERE IdProveedor = p_IdProveedor;

    IF resultado_temp = 0 THEN
        -- Si no hay compras relacionadas, eliminar el proveedor
        DELETE FROM PROVEEDOR WHERE IdProveedor = p_IdProveedor LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Proveedor eliminado exitosamente';
    ELSE
        SET p_Mensaje = 'El proveedor está relacionado con una o más compras y no se puede eliminar';
    END IF;
END //




/********************************************************************************************************/
CREATE TABLE CLIENTE (
    IdCliente INT PRIMARY KEY AUTO_INCREMENT,
    Documento VARCHAR(50) NULL,
    Nombres VARCHAR(50) NOT NULL,
    Apellidos VARCHAR(100) NULL,
    Telefono VARCHAR(50) NULL,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE USUARIO (
    IdUsuario INT PRIMARY KEY AUTO_INCREMENT,
    Documento VARCHAR(50) NOT NULL,
    Nombres VARCHAR(50) NOT NULL,
    Apellidos VARCHAR(50) NOT NULL,
    Clave VARCHAR(50) NOT NULL,
    IdRol INT,
    Estado BIT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdRol) REFERENCES ROL(IdRol)
);

CREATE TABLE SUCURSAL (
    IdSucursal INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(100),
    Direccion VARCHAR(100),
    Estado BIT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP
);
/*PROCEDIMIENTOS ALMACENADOS PARA TABLA SUCURSAL*/
/* INSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarSucursal(
    IN p_Nombre VARCHAR(100),
    IN p_Direccion VARCHAR(100),
    OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM SUCURSAL WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
        INSERT INTO SUCURSAL (Nombre, Direccion, Estado) VALUES (p_Nombre, p_Direccion, 1);
        SET p_Resultado = LAST_INSERT_ID();
    ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre de la Sucursal';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarSucursal(
    IN p_Id INT,
    IN p_NuevoNombre VARCHAR(100),
    IN p_NuevaDireccion VARCHAR(100),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM SUCURSAL WHERE Nombre = p_NuevoNombre AND IdSucursal != p_Id;
    IF resultado_temp = 0 THEN
        UPDATE SUCURSAL SET Nombre = p_NuevoNombre, Direccion = p_NuevaDireccion WHERE IdSucursal = p_Id;
    ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre de la Sucursal';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarSucursal(
    IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE IdSucursal = p_Id;
    IF resultado_temp = 0 THEN
        DELETE FROM SUCURSAL WHERE IdSucursal = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Sucursal eliminada exitosamente';
    ELSE
        SET p_Mensaje = 'La Sucursal está relacionada a uno o más productos';
    END IF;
END //

SELECT Nombre, Direccion FROM SUCURSAL;
/*----------------------------------------------------------*/

-- Insertar un nuevo registro en la tabla SUCURSAL
INSERT INTO SUCURSAL (Nombre, Direccion, Estado)
VALUES ('Sucursal A', 'Calle 123, Ciudad X', 1);


CREATE TABLE PRODUCTO (
    IdProducto INT PRIMARY KEY AUTO_INCREMENT,
    Codigo VARCHAR(50) NOT NULL,
    Id_Tipo_Producto INT,
    Id_Marca INT,
    Id_Modelo INT,
    Id_Capacidad_Tamanio INT,
    Id_Tipo_Componente INT,
    Stock INT NOT NULL DEFAULT 0,
    PrecioCompra DECIMAL(10,2) DEFAULT 0,
    PrecioVenta DECIMAL(10,2) DEFAULT 0,
	Id_Sucursal INT,
    Estado BIT,
    Descripcion TEXT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Id_Tipo_Producto) REFERENCES Tipo_Producto(Id),
    FOREIGN KEY (Id_Marca) REFERENCES Marca(Id),
    FOREIGN KEY (Id_Modelo) REFERENCES Modelo(Id),
    FOREIGN KEY (Id_Capacidad_Tamanio) REFERENCES Capacidad_Tamanio(Id),
    FOREIGN KEY (Id_Tipo_Componente) REFERENCES Tipo_Componente(Id),
    FOREIGN KEY (Id_Sucursal) REFERENCES SUCURSAL(IdSucursal)
);

-- PROCEDIMIENTO PARA INSERTAR PRODUCTOS
DELIMITER // 
CREATE PROCEDURE InsertarProducto(
IN p_Codigo Varchar(50),
IN p_Id_Tipo_Producto INT,
IN p_Id_Marca INT,
IN p_Id_Modelo INT,
IN p_Id_Capacidad_Tamanio INT,
IN p_Id_Tipo_Componente INT,
IN p_Stock INT,
IN p_PrecioCompra DECIMAL(10,2),
IN p_PrecioVenta DECIMAL(10,2),
IN p_Id_Sucursal INT,
IN p_Estado BIT,
IN p_Descripcion TEXT,
OUT p_Resultado INT
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		SET p_Resultado = 0;
	END;
    
	INSERT INTO PRODUCTO(Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion) 
	VALUES (p_Codigo, p_Id_Tipo_Producto, p_Id_Marca, p_Id_Modelo, p_Id_Capacidad_Tamanio, p_Id_Tipo_Componente, p_Stock, p_PrecioCompra, p_PrecioVenta, p_Id_Sucursal, p_Estado, p_Descripcion);
	SET p_Resultado = LAST_INSERT_ID();
END //

-- PROCEDIMIENTO PARA MODIFICAR PRODUCTOS

 DELIMITER //
CREATE PROCEDURE EditarProducto(
    IN p_IdProducto INT,
    IN p_Codigo VARCHAR(50),
    IN p_Id_Tipo_Producto INT,
    IN p_Id_Marca INT,
    IN p_Id_Modelo INT,
    IN p_Id_Capacidad_Tamanio INT,
    IN p_Id_Tipo_Componente INT,
    IN p_Stock INT,
    IN p_PrecioCompra DECIMAL(10,2),
    IN p_PrecioVenta DECIMAL(10,2),
    IN p_Id_Sucursal INT,
    IN p_Estado INT,
    IN p_Descripcion TEXT,
    OUT p_Resultado INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
        SET p_Resultado = 0;
    END;
    UPDATE PRODUCTO 
    SET 
        Codigo = p_Codigo,
        Id_Tipo_Producto = p_Id_Tipo_Producto,
        Id_Marca = p_Id_Marca,
        Id_Modelo = p_Id_Modelo,
        Id_Capacidad_Tamanio = p_Id_Capacidad_Tamanio,
        Id_Tipo_Componente = p_Id_Tipo_Componente,
        Stock = p_Stock,
        PrecioCompra = p_PrecioCompra,
        PrecioVenta = p_PrecioVenta,
        Id_Sucursal = p_Id_Sucursal,
        Estado = p_Estado,
        Descripcion = p_Descripcion
    WHERE IdProducto = p_IdProducto;
    SET p_Resultado = ROW_COUNT();
END //

-- PROCEDIMIENTO PARA BUSCAR PRODUCTOS
DELIMITER //
CREATE PROCEDURE BuscarProducto(IN criterio VARCHAR(50), IN valor VARCHAR(100))
BEGIN
    IF criterio = 'Serial' THEN
        SELECT p.*
        FROM PRODUCTO p
        WHERE p.Codigo LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Producto' THEN
        SELECT p.*
        FROM PRODUCTO p
        JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        WHERE tp.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Marca' THEN
        SELECT p.*
        FROM PRODUCTO p
        JOIN Marca m ON p.Id_Marca = m.Id
        WHERE m.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Modelo' THEN
        SELECT p.*
        FROM PRODUCTO p
        JOIN Modelo mo ON p.Id_Modelo = mo.Id
        WHERE mo.Nombre LIKE CONCAT('%', valor, '%');
        
    END IF;
END //

*************************
DELIMITER //
CREATE PROCEDURE BuscarProducto(IN criterio VARCHAR(50), IN valor VARCHAR(100))
BEGIN
    IF criterio = 'Serial' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE p.Codigo LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Producto' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE tp.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Marca' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE m.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Modelo' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE mo.Nombre LIKE CONCAT('%', valor, '%');
        
    END IF;
END //

CALL BuscarProducto('Modelo', 'Ninguno');
drop procedure BuscarProducto


select * from Capacidad_Tamanio
-- Insertar un nuevo registro en la tabla PRODUCTO
INSERT INTO PRODUCTO (Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion)
VALUES ('COD002', 2, 1, 2, 1,1, 10, 5000, 10000, 1, 1, 'Descripción de la laptop');
-- codigo,laptop,asus,rog strix,g15,nulo,nulo,10,4500,5600,1,1,laptop gamer
-- Insertar otro registro en la tabla PRODUCTO
INSERT INTO PRODUCTO (Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion)
VALUES ('COD002', 2, 1, 4, 3, 5, 50, 30.00, 60.00, 2, 1, 'Descripción del producto 2');

-- Insertar un tercer registro en la tabla PRODUCTO
INSERT INTO PRODUCTO (Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion)
VALUES ('COD005', 7, 2, 2, 2, 1, 200, 20.00, 40.00, 3, 1, 'Descripción del producto 5');

select * from Tipo_Producto
select * from Marca
select * from Modelo
select * from Capacidad_Tamanio
select * from Tipo_Componente

/*TABLAS UNIFICADAS*/

CREATE TABLE COMPRA (
    IdCompra INT PRIMARY KEY AUTO_INCREMENT,
    IdUsuario INT,
    IdProveedor INT,
    IdSucursal INT,
    TipoDocumento VARCHAR(50) NULL,
    NumeroDocumento VARCHAR(50) NULL,
    MontoTotal DECIMAL(10,2) NULL,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdUsuario) REFERENCES USUARIO(IdUsuario),
    FOREIGN KEY (IdProveedor) REFERENCES PROVEEDOR(IdProveedor),
    FOREIGN KEY (IdSucursal) REFERENCES SUCURSAL(IdSucursal)
);

CREATE TABLE DETALLE_COMPRA (
    IdDetalleCompra INT PRIMARY KEY AUTO_INCREMENT,
    IdCompra INT,
    IdProducto INT,
    PrecioCompra DECIMAL(10,2) DEFAULT 0,
    PrecioVenta DECIMAL(10,2) DEFAULT 0,
    Cantidad INT,
    MontoTotal DECIMAL(10,2),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdCompra) REFERENCES COMPRA(IdCompra),
    FOREIGN KEY (IdProducto) REFERENCES PRODUCTO(IdProducto)
);

CREATE TABLE VENTA (
    IdVenta INT PRIMARY KEY AUTO_INCREMENT,
    IdUsuario INT,
    IdSucursal INT,
    TipoDocumento VARCHAR(50) NULL,
    NumeroDocumento VARCHAR(50) NULL,
    DocumentoCliente VARCHAR(50) NULL,
    NombreCliente VARCHAR(100) NULL,
    MontoPagoEfectivo DECIMAL(10,2),
    MontoPagoQR DECIMAL(10,2),
    MontoPagoTransferencia DECIMAL(10,2),
    MontoCambio DECIMAL(10,2),
    MontoTotal DECIMAL(10,2),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdUsuario) REFERENCES USUARIO(IdUsuario),
    FOREIGN KEY (IdSucursal) REFERENCES SUCURSAL(IdSucursal)
);

CREATE TABLE DETALLE_VENTA (
    IdDetalleVenta INT PRIMARY KEY AUTO_INCREMENT,
    IdVenta INT,
    IdProducto INT,
    PrecioVenta DECIMAL(10,2),
    Cantidad INT,
    SubTotal DECIMAL(10,2),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdVenta) REFERENCES VENTA(IdVenta),
    FOREIGN KEY (IdProducto) REFERENCES PRODUCTO(IdProducto)
);

/*TABLA POR SI ACASO SINO ELIMINAMOS*/
CREATE TABLE NEGOCIO (
    IdNegocio INT PRIMARY KEY,
    Nombre VARCHAR(60),
    RUC VARCHAR(60),
    Direccion VARCHAR(60),
    Logo LONGBLOB NULL
);
/****************************************/

/*************************** CREACION DE PROCEDIMIENTOS ALMACENADOS ***************************/
/*--------------------------------------------------------------------------------------------*/
select * from USUARIO
select * from ROL

 insert into USUARIO(Documento,Nombres,Apellidos,Clave,IdRol,Estado)
 values 
 ('12345678','ADMINISTRADOR','#2','12345678',1,1)
 
   insert into PERMISO(IdRol,NombreMenu) values
  (3,'menuusuarios'),
  (3,'menumantenedor'),
  (3,'menuventas'),
  (3,'menucompras'),
  (3,'menuclientes'),
  (3,'menuproveedores'),
  (3,'menureportes'),
  (3,'menuacercade')

/*-------------------------- SP REGISTRAR PARA USUARIO ------------------------------------------------------------------*/

DELIMITER //
CREATE PROCEDURE SP_REGISTRARUSUARIO(
    IN p_Documento VARCHAR(50),
    IN p_Nombres VARCHAR(100),
    IN p_Apellidos VARCHAR(100),
    IN p_Clave VARCHAR(100),
    IN p_IdRol INT,
    IN p_Estado BIT,
    OUT p_IdUsuarioResultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE userCount INT;
    SET p_IdUsuarioResultado = 0;
    SET p_Mensaje = '';

    SELECT COUNT(*) INTO userCount FROM USUARIO WHERE Documento = p_Documento;

    IF userCount = 0 THEN
        INSERT INTO USUARIO(Documento, Nombres, Apellidos, Clave, IdRol, Estado)
        VALUES (p_Documento, p_Nombres, p_Apellidos, p_Clave, p_IdRol, p_Estado);
        SET p_IdUsuarioResultado = LAST_INSERT_ID();
    ELSE
        SET p_Mensaje = 'No se puede repetir el documento para más de un usuario';
    END IF;
END //


/*-------------------------- SP EDITAR PARA USUARIO ------------------------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE SP_EDITARUSUARIO(
    IN p_IdUsuario INT,
    IN p_Documento VARCHAR(50),
    IN p_Nombres VARCHAR(100),
    IN p_Apellidos VARCHAR(100),
    IN p_Clave VARCHAR(100),
    IN p_IdRol INT,
    IN p_Estado BIT,
    OUT p_Respuesta BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE userCount INT;
    SET p_Respuesta = 0;
    SET p_Mensaje = '';

    SELECT COUNT(*) INTO userCount FROM USUARIO WHERE Documento = p_Documento AND IdUsuario != p_IdUsuario;
    IF userCount = 0 THEN
        UPDATE USUARIO
        SET Documento = p_Documento,
            Nombres = p_Nombres,
            Apellidos = p_Apellidos,
            Clave = p_Clave,
            IdRol = p_IdRol,
            Estado = p_Estado
        WHERE IdUsuario = p_IdUsuario;
        SET p_Respuesta = 1;
    ELSE
        SET p_Mensaje = 'No se puede repetir el documento para más de un usuario';
    END IF;
END //

DROP PROCEDURE IF EXISTS SP_EDITARUSUARIO;

/*-------------------------- SP ELIMINAR PARA USUARIO ------------------------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE SP_ELIMINARUSUARIO(
    IN p_IdUsuario INT,
    OUT p_Respuesta BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE pasoreglas BIT DEFAULT 1;
    SET p_Respuesta = 0;
    SET p_Mensaje = '';

    IF EXISTS (
        SELECT * FROM COMPRA C 
        INNER JOIN USUARIO U ON U.IdUsuario = C.IdUsuario
        WHERE U.IdUsuario = p_IdUsuario
    ) THEN
        SET pasoreglas = 0;
        SET p_Respuesta = 0;
        SET p_Mensaje = CONCAT(p_Mensaje, 'No se puede eliminar porque el usuario se encuentra relacionado a una COMPRA\n');
    END IF;
    
    IF EXISTS (
        SELECT * FROM VENTA V
        INNER JOIN USUARIO U ON U.IdUsuario = V.IdUsuario
        WHERE U.IdUsuario = p_IdUsuario
    ) THEN
        SET pasoreglas = 0;
        SET p_Respuesta = 0;
        SET p_Mensaje = CONCAT(p_Mensaje, 'No se puede eliminar porque el usuario se encuentra relacionado a una VENTA\n');
    END IF;
    IF pasoreglas = 1 THEN
        DELETE FROM USUARIO WHERE IdUsuario = p_IdUsuario;
        SET p_Respuesta = 1;
    END IF;
END //













WITH fk_info as (
(SELECT (@fk_info:=NULL),
    (SELECT (0)
    FROM (SELECT kcu.table_schema,
        kcu.table_name,
        kcu.column_name as fk_column,
        kcu.constraint_name as foreign_key_name,
        kcu.referenced_table_name as reference_table,
        kcu.referenced_column_name as reference_column,
        CONCAT('FOREIGN KEY (', kcu.column_name, ') REFERENCES ',
            kcu.referenced_table_name, '(', kcu.referenced_column_name, ') ',
            'ON UPDATE ', rc.update_rule,
            ' ON DELETE ', rc.delete_rule) AS fk_def
    FROM
        information_schema.key_column_usage kcu
    JOIN
        information_schema.referential_constraints rc
        ON kcu.constraint_name = rc.constraint_name
            AND kcu.table_schema = rc.constraint_schema
        AND kcu.table_name = rc.table_name
    WHERE
        kcu.referenced_table_name IS NOT NULL) as fk
    WHERE table_schema LIKE IFNULL(NULL, '%')
        AND table_schema = DATABASE()
        AND (0x00) IN (@fk_info:=CONCAT_WS(',', @fk_info, CONCAT('{"schema":"',table_schema,
                                    '","table":"',table_name,
                                    '","column":"', IFNULL(fk_column, ''),
                                                '","foreign_key_name":"', IFNULL(foreign_key_name, ''),
                                                '","reference_table":"', IFNULL(reference_table, ''),
                                                '","reference_column":"', IFNULL(reference_column, ''),
                                                '","fk_def":"', IFNULL(fk_def, ''),
                                    '"}')))))
), pk_info AS (
    (SELECT (@pk_info:=NULL),
              (SELECT (0)
               FROM (SELECT TABLE_SCHEMA,
                            TABLE_NAME AS pk_table,
                            COLUMN_NAME AS pk_column,
                            CONCAT('PRIMARY KEY (', GROUP_CONCAT(COLUMN_NAME ORDER BY ORDINAL_POSITION SEPARATOR ', '), ')') AS pk_def
                       FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
                       WHERE CONSTRAINT_NAME = 'PRIMARY'
                       GROUP BY TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME
                       ORDER BY TABLE_SCHEMA, TABLE_NAME, MIN(ORDINAL_POSITION)) AS pk
               WHERE table_schema LIKE IFNULL(NULL, '%')
               AND table_schema = DATABASE()
               AND (0x00) IN (@pk_info:=CONCAT_WS(',', @pk_info, CONCAT('{"schema":"', table_schema,
                                                                        '","table":"', pk_table,
                                                                        '","column":"', pk_column,
                                                                        '","pk_def":"', IFNULL(pk_def, ''),
                                                                        '"}')))))
), cols as
(
  (SELECT (@cols := NULL),
        (SELECT (0)
         FROM information_schema.columns cols
         WHERE cols.table_schema LIKE IFNULL(NULL, '%')
           AND cols.table_schema = DATABASE()
           AND (0x00) IN (@cols := CONCAT_WS(',', @cols, CONCAT(
                '{"schema":"', cols.table_schema,
                '","table":"', cols.table_name,
                '","name":"', REPLACE(cols.column_name, '"', '\"'),
                '","type":"', LOWER(cols.data_type),
                '","character_maximum_length":"', IFNULL(cols.character_maximum_length, 'null'),
                '","precision":',
                    CASE
                        WHEN cols.data_type IN ('decimal', 'numeric')
                        THEN CONCAT('{"precision":', IFNULL(cols.numeric_precision, 'null'),
                                    ',"scale":', IFNULL(cols.numeric_scale, 'null'), '}')
                        ELSE 'null'
                    END,
                ',"ordinal_position":"', cols.ordinal_position,
                '","nullable":', IF(cols.is_nullable = 'YES', 'true', 'false'),
                ',"default":"', IFNULL(REPLACE(cols.column_default, '"', '\"'), ''),
                '","collation":"', IFNULL(cols.collation_name, ''), '"}'
            )))))
), indexes as (
   (SELECT (@indexes := NULL),
            (SELECT (0)
             FROM information_schema.statistics indexes
             WHERE table_schema LIKE IFNULL(NULL, '%')
                 AND table_schema = DATABASE()
                 AND (0x00) IN  (@indexes:=CONCAT_WS(',', @indexes, CONCAT('{"schema":"', indexes.table_schema,
                                     '","table":"', indexes.table_name,
                                     '","name":"', indexes.index_name,
                                     '","column":"', indexes.column_name,
                                     '","index_type":"', LOWER(indexes.index_type),
                                     '","cardinality":', indexes.cardinality,
                                     ',"direction":"', (CASE WHEN indexes.collation = 'D' THEN 'desc' ELSE 'asc' END),
                                     '","unique":', IF(indexes.non_unique = 1, 'false', 'true'), '}')))))
),  tbls as
(
  (SELECT (@tbls:=NULL),
              (SELECT (0)
               FROM information_schema.tables tbls
               WHERE table_schema LIKE IFNULL(NULL, '%')
                   AND table_schema = DATABASE()
                   AND (0x00) IN (@tbls:=CONCAT_WS(',', @tbls, CONCAT('{', '"schema":"', `TABLE_SCHEMA`, '",',
                                               '"table":"', `TABLE_NAME`, '",',
                                             '"rows":', IFNULL(`TABLE_ROWS`, 0),
                                             ', "type":"', IFNULL(`TABLE_TYPE`, ''), '",',
                                             '"engine":"', IFNULL(`ENGINE`, ''), '",',
                                             '"collation":"', IFNULL(`TABLE_COLLATION`, ''), '"}')))))
), views as (
(SELECT (@views:=NULL),
              (SELECT (0)
               FROM information_schema.views views
               WHERE table_schema LIKE IFNULL(NULL, '%')
                   AND table_schema = DATABASE()
                   AND (0x00) IN (@views:=CONCAT_WS(',', @views, CONCAT('{', '"schema":"', `TABLE_SCHEMA`, '",',
                                                   '"view_name":"', `TABLE_NAME`, '",',
                                                   '"definition":"', REPLACE(REPLACE(TO_BASE64(VIEW_DEFINITION), ' ', ''), '
', ''), '"}'))) ) )
)
SELECT CAST(CONCAT('{"fk_info": [', IFNULL(@fk_info, ''),
                  '], "pk_info": [', IFNULL(@pk_info, ''),
                  '], "columns": [', IFNULL(@cols, ''),
                  '], "indexes": [', IFNULL(@indexes, ''),
                  '], "tables":[', IFNULL(@tbls, ''),
                  '], "views":[', IFNULL(@views, ''),
                  '], "database_name": "', DATABASE(),
                  '", "version": "', VERSION(), '"}') AS CHAR) AS ''
FROM fk_info, pk_info, cols, indexes, tbls, views;










