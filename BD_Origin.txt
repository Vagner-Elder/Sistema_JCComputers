select * from Capacidad_Tamanio

/*CREACION DE TABLAS INDIVIDUALES PARA EL PRODUCTO*/
/*-----------------------------------------------*/
CREATE TABLE Tipo_Producto (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA TIPO_PRODUCTO*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarTipoProducto(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Tipo_Producto WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Tipo_Producto (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarTipoProducto(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Tipo_Producto WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Tipo_Producto SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarTipoProducto(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Tipo_Producto = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Tipo_Producto WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Tipo de producto eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El tipo de producto está relacionado a uno o más productos'; 
    END IF;
END //
/*----------------------------------------------------------*/

CREATE TABLE Marca (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA MARCA*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarMarca(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Marca WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Marca (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarMarca(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Marca WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Marca SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarMarca(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Marca = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Marca WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Tipo de producto eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El tipo de producto está relacionado a uno o más productos'; 
    END IF;
END //
/*----------------------------------------------------------*/

CREATE TABLE Capacidad_Tamanio (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);
/*PROCEDIMIENTOS ALMACENADOS PARA TABLA CAPACIDAD_TAMANIO*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarCapacidad_Tamanio(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Capacidad_Tamanio WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Capacidad_Tamanio (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarCapacidad_Tamanio(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Capacidad_Tamanio WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Capacidad_Tamanio SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarCapacidad_Tamanio(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Capacidad_Tamanio = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Capacidad_Tamanio WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Capacidad eliminada exitosamente'; 
    ELSE
        SET p_Mensaje = 'La Capacidad está relacionada a uno o más productos'; 
    END IF;
END //

select * from Capacidad_Tamanio
/*----------------------------------------------------------*/

CREATE TABLE Modelo (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA MODELO*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarModelo(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Modelo WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Modelo (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarModelo(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Modelo WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Modelo SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarModelo(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Modelo = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Modelo WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Modelo eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El Modelo está relacionado a uno o más productos'; 
    END IF;
END //

select * from Modelo
/*----------------------------------------------------------*/

CREATE TABLE Tipo_Componente (
    Id INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(50)
);

/*PROCEDIMIENTOS ALMACENADOS PARA TABLA TIPO COMPONENTE*/
/* NSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarTipoComponente(
	IN p_Nombre VARCHAR(50),
	OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM Tipo_Componente WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
		INSERT INTO Tipo_Componente (Nombre) VALUES (p_Nombre);
        SET p_Resultado = LAST_INSERT_ID();
	ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarTipoComponente(
	IN p_Id INT,
    IN p_NuevoNombre VARCHAR(50),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM Tipo_Componente WHERE Nombre = p_NuevoNombre AND Id != p_Id;
     IF resultado_temp = 0 THEN
		UPDATE Tipo_Componente SET Nombre = p_NuevoNombre WHERE Id = p_Id;
	ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarTipoComponente(
        IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE Id_Tipo_Componente = p_Id;
   IF resultado_temp = 0 THEN
        DELETE FROM Tipo_Componente WHERE Id = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Tipo de Componente eliminado exitosamente'; 
    ELSE
        SET p_Mensaje = 'El Tipo de Componente está relacionado a uno o más productos'; 
    END IF;
END //

select * from Tipo_Componente;
/*----------------------------------------------------------*/


/*CREACION DE TABLAS INDIVIDUALES PARA EL RESTO*/

CREATE TABLE ROL (
    IdRol INT PRIMARY KEY AUTO_INCREMENT,
    Descripcion VARCHAR(50)
);

CREATE TABLE PERMISO (
    IdPermiso INT PRIMARY KEY AUTO_INCREMENT,
    IdRol INT,
    NombreMenu VARCHAR(100),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdRol) REFERENCES ROL(IdRol)
);

/* ******************************************************************************************* */
CREATE TABLE PROVEEDOR (
    IdProveedor INT PRIMARY KEY AUTO_INCREMENT,
    Documento VARCHAR(50) NULL,
    TipoDocumento VARCHAR(50) NULL,
    RazonSocial VARCHAR(50) NOT NULL,
    Telefono VARCHAR(50) NULL,
    Estado BIT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP
);

select * from PROVEEDOR
INSERT INTO PROVEEDOR(Documento,TipoDocumento,RazonSocial,Telefono,Estado)
VALUES('1325896','CI','Manuel CVervantes','75664059',0)
select IdProveedor,Documento,TipoDocumento,RazonSocial,Telefono,Estado from PROVEEDOR

/* PROCEDIMIENTOS PARA INSERTAR PROVEEDORES */
DELIMITER //
CREATE PROCEDURE InsertarProveedores(
	IN p_Documento VARCHAR(50),
    IN p_TipoDocumento VARCHAR(50),
    IN p_RazonSocial VARCHAR(50),
    IN p_Telefono VARCHAR(50),
    IN p_Estado BIT,
    OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
	DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PROVEEDOR WHERE Documento = p_Documento; -- Verifica si ya existe un proveedor con el mismo Documento
    IF resultado_temp = 0 THEN
		INSERT INTO PROVEEDOR(Documento,TipoDocumento,RazonSocial,Telefono,Estado)
		VALUES(p_Documento,p_TipoDocumento,p_RazonSocial,p_Telefono,p_Estado);
    
		SET p_Resultado = LAST_INSERT_ID();
		SET p_Mensaje = 'Proveedor Insertado Correctamente';
    ELSE
		SET p_Mensaje = 'El Proveedor con el mismo Documento ya existe';
    END IF;
END //

/*PROCEDIMIENTO PARA EDITAR PROVEEDOR*/
DELIMITER //
CREATE PROCEDURE EditarProveedor(
    IN p_IdProveedor INT,
    IN p_NuevoDocumento VARCHAR(50),
    IN p_NuevoTipoDocumento VARCHAR(50),
    IN p_NuevaRazonSocial VARCHAR(50),
    IN p_NuevoTelefono VARCHAR(50),
    IN p_NuevoEstado BIT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp BIT;
    SET p_Resultado = 1;

    -- Verificar si ya existe un proveedor con el mismo Documento, excluyendo el proveedor actual
    SELECT CASE 
        WHEN COUNT(*) = 0 THEN 0 
        ELSE 1 
    END INTO resultado_temp 
    FROM PROVEEDOR 
    WHERE Documento = p_NuevoDocumento AND IdProveedor != p_IdProveedor;

    IF resultado_temp = 0 THEN
        -- Actualizar los datos del proveedor si no hay conflictos
        UPDATE PROVEEDOR
        SET Documento = p_NuevoDocumento,
            TipoDocumento = p_NuevoTipoDocumento,
            RazonSocial = p_NuevaRazonSocial,
            Telefono = p_NuevoTelefono,
            Estado = p_NuevoEstado
        WHERE IdProveedor = p_IdProveedor;
        
        SET p_Mensaje = 'Proveedor modificado correctamente.';
    ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'Ya existe un proveedor con el mismo Documento.';
    END IF;
END //

/* PROCEDIMIENTO ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarProveedor(
    IN p_IdProveedor INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    -- Verificar si el proveedor está relacionado con alguna compra
    SELECT COUNT(*) INTO resultado_temp 
    FROM COMPRA 
    WHERE IdProveedor = p_IdProveedor;

    IF resultado_temp = 0 THEN
        -- Si no hay compras relacionadas, eliminar el proveedor
        DELETE FROM PROVEEDOR WHERE IdProveedor = p_IdProveedor LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Proveedor eliminado exitosamente';
    ELSE
        SET p_Mensaje = 'El proveedor está relacionado con una o más compras y no se puede eliminar';
    END IF;
END //

/********************************************************************************************************/
CREATE TABLE CLIENTE (
    IdCliente INT PRIMARY KEY AUTO_INCREMENT,
    Documento VARCHAR(50) NULL,
    Nombres VARCHAR(50) NOT NULL,
    Apellidos VARCHAR(100) NULL,
    Telefono VARCHAR(50) NULL,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP
);

select IdCliente,Documento,Nombres,Apellidos,Telefono from CLIENTE
INSERT INTO CLIENTE (Documento, Nombres, Apellidos, Telefono)
VALUES 
('12345678', 'Juan', 'Pérez', '555-1234'),
('87654321', 'María', 'González', '555-5678'),
('11223344', 'Carlos', 'Ramírez', '555-8765'),
('44332211', 'Ana', 'López', '555-4321'),
('99887766', 'Luis', 'Martínez', '555-7890');

/* Procedimiento para insertar clientes */
DELIMITER //
CREATE PROCEDURE InsertarCliente(
    IN p_Documento VARCHAR(50),
    IN p_Nombres VARCHAR(50),
    IN p_Apellidos VARCHAR(100),
    IN p_Telefono VARCHAR(50),
    OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    -- Verifica si ya existe un cliente con el mismo Documento
    SELECT COUNT(*) INTO resultado_temp FROM CLIENTE WHERE Documento = p_Documento;
    IF resultado_temp = 0 THEN
        -- Inserta un nuevo registro en la tabla CLIENTE
        INSERT INTO CLIENTE(Documento, Nombres, Apellidos, Telefono)
        VALUES(p_Documento, p_Nombres, p_Apellidos, p_Telefono);
        SET p_Resultado = LAST_INSERT_ID();
        SET p_Mensaje = 'Cliente insertado correctamente';
    ELSE
        SET p_Mensaje = 'El cliente con el mismo Documento ya existe';
    END IF;
END //

/* Procedimiento para editar clientes */
DELIMITER //
CREATE PROCEDURE EditarCliente(
    IN p_IdCliente INT,
    IN p_Documento VARCHAR(50),
    IN p_Nombres VARCHAR(50),
    IN p_Apellidos VARCHAR(100),
    IN p_Telefono VARCHAR(50),
    OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE cliente_existente INT;
    SET p_Resultado = 0;
    -- Verifica si el cliente con el IdCliente especificado existe
    SELECT COUNT(*) INTO cliente_existente FROM CLIENTE WHERE IdCliente = p_IdCliente;
    IF cliente_existente = 1 THEN
        -- Actualiza los datos del cliente en la tabla CLIENTE
        UPDATE CLIENTE
        SET Documento = p_Documento, 
            Nombres = p_Nombres, 
            Apellidos = p_Apellidos, 
            Telefono = p_Telefono
        WHERE IdCliente = p_IdCliente;
        SET p_Resultado = p_IdCliente;
        SET p_Mensaje = 'Cliente actualizado correctamente';
    ELSE
        SET p_Mensaje = 'El cliente con el IdCliente especificado no existe';
    END IF;
END //



CREATE TABLE USUARIO (
    IdUsuario INT PRIMARY KEY AUTO_INCREMENT,
    Documento VARCHAR(50) NOT NULL,
    Nombres VARCHAR(50) NOT NULL,
    Apellidos VARCHAR(50) NOT NULL,
    Clave VARCHAR(50) NOT NULL,
    IdRol INT,
    Estado BIT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdRol) REFERENCES ROL(IdRol)
);

CREATE TABLE SUCURSAL (
    IdSucursal INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(100),
    Direccion VARCHAR(100),
    Estado BIT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP
);
/*PROCEDIMIENTOS ALMACENADOS PARA TABLA SUCURSAL*/
/* INSERTAR */
DELIMITER //
CREATE PROCEDURE InsertarSucursal(
    IN p_Nombre VARCHAR(100),
    IN p_Direccion VARCHAR(100),
    OUT p_Resultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM SUCURSAL WHERE Nombre = p_Nombre;
    IF resultado_temp = 0 THEN
        INSERT INTO SUCURSAL (Nombre, Direccion, Estado) VALUES (p_Nombre, p_Direccion, 1);
        SET p_Resultado = LAST_INSERT_ID();
    ELSE
        SET p_Mensaje = 'No se puede repetir el Nombre de la Sucursal';
    END IF;
END //

/* EDITAR */
DELIMITER //
CREATE PROCEDURE EditarSucursal(
    IN p_Id INT,
    IN p_NuevoNombre VARCHAR(100),
    IN p_NuevaDireccion VARCHAR(100),
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp BIT;
    SET p_Resultado = 1;
    SELECT CASE WHEN COUNT(*) = 0 THEN 0 ELSE 1 END INTO resultado_temp FROM SUCURSAL WHERE Nombre = p_NuevoNombre AND IdSucursal != p_Id;
    IF resultado_temp = 0 THEN
        UPDATE SUCURSAL SET Nombre = p_NuevoNombre, Direccion = p_NuevaDireccion WHERE IdSucursal = p_Id;
    ELSE
        SET p_Resultado = 0;
        SET p_Mensaje = 'No se puede repetir el Nombre de la Sucursal';
    END IF;
END //

/* ELIMINAR */
DELIMITER //
CREATE PROCEDURE EliminarSucursal(
    IN p_Id INT,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE resultado_temp INT;
    SET p_Resultado = 0;
    SELECT COUNT(*) INTO resultado_temp FROM PRODUCTO WHERE IdSucursal = p_Id;
    IF resultado_temp = 0 THEN
        DELETE FROM SUCURSAL WHERE IdSucursal = p_Id LIMIT 1;
        SET p_Resultado = 1;
        SET p_Mensaje = 'Sucursal eliminada exitosamente';
    ELSE
        SET p_Mensaje = 'La Sucursal está relacionada a uno o más productos';
    END IF;
END //

SELECT Nombre, Direccion FROM SUCURSAL;
/*----------------------------------------------------------*/

-- Insertar un nuevo registro en la tabla SUCURSAL
INSERT INTO SUCURSAL (Nombre, Direccion, Estado)
VALUES ('Sucursal A', 'Calle 123, Ciudad X', 1);


CREATE TABLE PRODUCTO (
    IdProducto INT PRIMARY KEY AUTO_INCREMENT,
    Codigo VARCHAR(50) NOT NULL,
    Id_Tipo_Producto INT,
    Id_Marca INT,
    Id_Modelo INT,
    Id_Capacidad_Tamanio INT,
    Id_Tipo_Componente INT,
    Stock INT NOT NULL DEFAULT 0,
    PrecioCompra DECIMAL(10,2) DEFAULT 0,
    PrecioVenta DECIMAL(10,2) DEFAULT 0,
	Id_Sucursal INT,
    Estado BIT,
    Descripcion TEXT,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Id_Tipo_Producto) REFERENCES Tipo_Producto(Id),
    FOREIGN KEY (Id_Marca) REFERENCES Marca(Id),
    FOREIGN KEY (Id_Modelo) REFERENCES Modelo(Id),
    FOREIGN KEY (Id_Capacidad_Tamanio) REFERENCES Capacidad_Tamanio(Id),
    FOREIGN KEY (Id_Tipo_Componente) REFERENCES Tipo_Componente(Id),
    FOREIGN KEY (Id_Sucursal) REFERENCES SUCURSAL(IdSucursal)
);

-- PROCEDIMIENTO PARA INSERTAR PRODUCTOS
DELIMITER // 
CREATE PROCEDURE InsertarProducto(
IN p_Codigo Varchar(50),
IN p_Id_Tipo_Producto INT,
IN p_Id_Marca INT,
IN p_Id_Modelo INT,
IN p_Id_Capacidad_Tamanio INT,
IN p_Id_Tipo_Componente INT,
IN p_Stock INT,
IN p_PrecioCompra DECIMAL(10,2),
IN p_PrecioVenta DECIMAL(10,2),
IN p_Id_Sucursal INT,
IN p_Estado BIT,
IN p_Descripcion TEXT,
OUT p_Resultado INT
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
		SET p_Resultado = 0;
	END;
    
	INSERT INTO PRODUCTO(Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion) 
	VALUES (p_Codigo, p_Id_Tipo_Producto, p_Id_Marca, p_Id_Modelo, p_Id_Capacidad_Tamanio, p_Id_Tipo_Componente, p_Stock, p_PrecioCompra, p_PrecioVenta, p_Id_Sucursal, p_Estado, p_Descripcion);
	SET p_Resultado = LAST_INSERT_ID();
END //

-- PROCEDIMIENTO PARA MODIFICAR PRODUCTOS

 DELIMITER //
CREATE PROCEDURE EditarProducto(
    IN p_IdProducto INT,
    IN p_Codigo VARCHAR(50),
    IN p_Id_Tipo_Producto INT,
    IN p_Id_Marca INT,
    IN p_Id_Modelo INT,
    IN p_Id_Capacidad_Tamanio INT,
    IN p_Id_Tipo_Componente INT,
    IN p_Stock INT,
    IN p_PrecioCompra DECIMAL(10,2),
    IN p_PrecioVenta DECIMAL(10,2),
    IN p_Id_Sucursal INT,
    IN p_Estado INT,
    IN p_Descripcion TEXT,
    OUT p_Resultado INT
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
        SET p_Resultado = 0;
    END;
    UPDATE PRODUCTO 
    SET 
        Codigo = p_Codigo,
        Id_Tipo_Producto = p_Id_Tipo_Producto,
        Id_Marca = p_Id_Marca,
        Id_Modelo = p_Id_Modelo,
        Id_Capacidad_Tamanio = p_Id_Capacidad_Tamanio,
        Id_Tipo_Componente = p_Id_Tipo_Componente,
        Stock = p_Stock,
        PrecioCompra = p_PrecioCompra,
        PrecioVenta = p_PrecioVenta,
        Id_Sucursal = p_Id_Sucursal,
        Estado = p_Estado,
        Descripcion = p_Descripcion
    WHERE IdProducto = p_IdProducto;
    SET p_Resultado = ROW_COUNT();
END //

-- PROCEDIMIENTO PARA BUSCAR PRODUCTOS
DELIMITER //
CREATE PROCEDURE BuscarProducto(IN criterio VARCHAR(50), IN valor VARCHAR(100))
BEGIN
    IF criterio = 'Serial' THEN
        SELECT p.*
        FROM PRODUCTO p
        WHERE p.Codigo LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Producto' THEN
        SELECT p.*
        FROM PRODUCTO p
        JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        WHERE tp.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Marca' THEN
        SELECT p.*
        FROM PRODUCTO p
        JOIN Marca m ON p.Id_Marca = m.Id
        WHERE m.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Modelo' THEN
        SELECT p.*
        FROM PRODUCTO p
        JOIN Modelo mo ON p.Id_Modelo = mo.Id
        WHERE mo.Nombre LIKE CONCAT('%', valor, '%');
        
    END IF;
END //

*************************
DELIMITER //
CREATE PROCEDURE BuscarProducto(IN criterio VARCHAR(50), IN valor VARCHAR(100))
BEGIN
    IF criterio = 'Serial' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE p.Codigo LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Producto' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE tp.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Marca' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE m.Nombre LIKE CONCAT('%', valor, '%');
        
    ELSEIF criterio = 'Modelo' THEN
        SELECT p.IdProducto, p.Codigo, tp.Nombre AS TipoProducto, m.Nombre AS Marca, mo.Nombre AS Modelo,
               c.Nombre AS CapacidadTamano, tc.Nombre AS TipoComponente, p.Stock, p.PrecioCompra,
               p.PrecioVenta, s.Nombre AS Sucursal, p.Estado, p.Descripcion, p.FechaRegistro
        FROM PRODUCTO p
        LEFT JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
        LEFT JOIN Marca m ON p.Id_Marca = m.Id
        LEFT JOIN Modelo mo ON p.Id_Modelo = mo.Id
        LEFT JOIN Capacidad_Tamanio c ON p.Id_Capacidad_Tamanio = c.Id
        LEFT JOIN Tipo_Componente tc ON p.Id_Tipo_Componente = tc.Id
        LEFT JOIN SUCURSAL s ON p.Id_Sucursal = s.IdSucursal
        WHERE mo.Nombre LIKE CONCAT('%', valor, '%');
        
    END IF;
END //

CALL BuscarProducto('Modelo', 'Ninguno');
drop procedure BuscarProducto


select * from Capacidad_Tamanio
-- Insertar un nuevo registro en la tabla PRODUCTO
INSERT INTO PRODUCTO (Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion)
VALUES ('COD002', 2, 1, 2, 1,1, 10, 5000, 10000, 1, 1, 'Descripción de la laptop');
-- codigo,laptop,asus,rog strix,g15,nulo,nulo,10,4500,5600,1,1,laptop gamer
-- Insertar otro registro en la tabla PRODUCTO
INSERT INTO PRODUCTO (Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion)
VALUES ('COD002', 2, 1, 4, 3, 5, 50, 30.00, 60.00, 2, 1, 'Descripción del producto 2');

-- Insertar un tercer registro en la tabla PRODUCTO
INSERT INTO PRODUCTO (Codigo, Id_Tipo_Producto, Id_Marca, Id_Modelo, Id_Capacidad_Tamanio, Id_Tipo_Componente, Stock, PrecioCompra, PrecioVenta, Id_Sucursal, Estado, Descripcion)
VALUES ('COD005', 7, 2, 2, 2, 1, 200, 20.00, 40.00, 3, 1, 'Descripción del producto 5');

select * from Tipo_Producto
select * from Marca
select * from Modelo
select * from Capacidad_Tamanio
select * from Tipo_Componente

/********************************TABLAS UNIFICADAS***************************************/

CREATE TABLE COMPRA (
    IdCompra INT PRIMARY KEY AUTO_INCREMENT,
    IdUsuario INT,
    IdProveedor INT,
    IdSucursal INT,
    TipoDocumento VARCHAR(50) NULL,
    NumeroDocumento VARCHAR(50) NULL,
    MontoTotal DECIMAL(10,2) NULL,
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdUsuario) REFERENCES USUARIO(IdUsuario),
    FOREIGN KEY (IdProveedor) REFERENCES PROVEEDOR(IdProveedor),
    FOREIGN KEY (IdSucursal) REFERENCES SUCURSAL(IdSucursal)
);

/*Procedimiento para registrar compra */
DELIMITER //
CREATE PROCEDURE sp_RegistrarCompra(
    IN p_IdUsuario INT,
    IN p_IdProveedor INT,
    IN p_TipoDocumento VARCHAR(500),
    IN p_NumeroDocumento VARCHAR(500),
    IN p_MontoTotal DECIMAL(18,2),
    IN DetalleCompra JSON,
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE v_IdCompra INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- Manejo de errores
        SET p_Resultado = 0;
        SET p_Mensaje = 'Error al registrar la compra';
        ROLLBACK;
    END;
    START TRANSACTION;
    -- Insertar en la tabla COMPRA
    INSERT INTO COMPRA(IdUsuario, IdProveedor, TipoDocumento, NumeroDocumento, MontoTotal)
    VALUES (p_IdUsuario, p_IdProveedor, p_TipoDocumento, p_NumeroDocumento, p_MontoTotal);

    -- Obtener el último ID de la tabla COMPRA
    SET v_IdCompra = LAST_INSERT_ID();

    -- Insertar en la tabla DETALLE_COMPRA utilizando los datos del JSON
    INSERT INTO DETALLE_COMPRA(IdCompra, IdProducto, PrecioCompra, PrecioVenta, Cantidad, MontoTotal)
    SELECT v_IdCompra, JSON_UNQUOTE(JSON_EXTRACT(dc.Item, '$.IdProducto')), 
           JSON_UNQUOTE(JSON_EXTRACT(dc.Item, '$.PrecioCompra')), 
           JSON_UNQUOTE(JSON_EXTRACT(dc.Item, '$.PrecioVenta')), 
           JSON_UNQUOTE(JSON_EXTRACT(dc.Item, '$.Cantidad')), 
           JSON_UNQUOTE(JSON_EXTRACT(dc.Item, '$.MontoTotal'))
    FROM JSON_TABLE(DetalleCompra, '$[*]' COLUMNS (
        Item JSON PATH '$'
    )) AS dc;
    
    -- Actualizar la tabla PRODUCTO
    UPDATE PRODUCTO p
    INNER JOIN JSON_TABLE(DetalleCompra, '$[*]' COLUMNS (
        IdProducto INT PATH '$.IdProducto',
        Cantidad INT PATH '$.Cantidad',
        PrecioCompra DECIMAL(18,2) PATH '$.PrecioCompra',
        PrecioVenta DECIMAL(18,2) PATH '$.PrecioVenta'
    )) AS dc ON dc.IdProducto = p.IdProducto
    SET p.Stock = p.Stock + dc.Cantidad,
        p.PrecioCompra = dc.PrecioCompra,
        p.PrecioVenta = dc.PrecioVenta;

    COMMIT;

    SET p_Resultado = 1;
    SET p_Mensaje = 'Compra registrada exitosamente';
END //




CREATE TABLE DETALLE_COMPRA (
    IdDetalleCompra INT PRIMARY KEY AUTO_INCREMENT,
    IdCompra INT,
    IdProducto INT,
    PrecioCompra DECIMAL(10,2) DEFAULT 0,
    PrecioVenta DECIMAL(10,2) DEFAULT 0,
    Cantidad INT,
    MontoTotal DECIMAL(10,2),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdCompra) REFERENCES COMPRA(IdCompra),
    FOREIGN KEY (IdProducto) REFERENCES PRODUCTO(IdProducto)
);

SELECT tp.Nombre AS TipoProductoNombre, dc.PrecioCompra, dc.PrecioVenta, dc.Cantidad, dc.MontoTotal
FROM DETALLE_COMPRA dc
INNER JOIN PRODUCTO p ON p.IdProducto = dc.IdProducto
INNER JOIN Tipo_Producto tp ON p.Id_Tipo_Producto = tp.Id
WHERE dc.IdCompra = 00003;


-- Eliminar la columna NombreCliente
ALTER TABLE VENTA
DROP COLUMN NombreCliente;
-- Agregar la columna IdCliente con clave foránea a CLIENTE
ALTER TABLE VENTA
ADD COLUMN IdCliente INT,
ADD CONSTRAINT FK_VENTA_CLIENTE FOREIGN KEY (IdCliente) REFERENCES CLIENTE(IdCliente);



CREATE TABLE VENTA (
    IdVenta INT PRIMARY KEY AUTO_INCREMENT,
    IdUsuario INT,
    IdSucursal INT,
    TipoDocumento VARCHAR(50) NULL,
    NumeroDocumento VARCHAR(50) NULL,
    DocumentoCliente VARCHAR(50) NULL,
    IdCliente INT,
    MontoPago DECIMAL(10,2),
    MontoCambio DECIMAL(10,2),
    MontoTotal DECIMAL(10,2),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdUsuario) REFERENCES USUARIO(IdUsuario),
    FOREIGN KEY (IdSucursal) REFERENCES SUCURSAL(IdSucursal),
    FOREIGN KEY (IdCliente) REFERENCES CLIENTE(IdCliente)
);


DELIMITER //
CREATE PROCEDURE usp_RegistrarVenta(
    IN p_IdUsuario INT,
    IN p_IdSucursal INT,
    IN p_TipoDocumento VARCHAR(50),
    IN p_NumeroDocumento VARCHAR(50),
    IN p_DocumentoCliente VARCHAR(50),
    IN p_IdCliente INT,
    IN p_MontoPago DECIMAL(10,2),
    IN p_MontoCambio DECIMAL(10,2),
    IN p_MontoTotal DECIMAL(10,2),
    IN p_DetalleVenta JSON, -- Se usa JSON para pasar detalles de venta
    OUT p_Resultado BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE idventa INT DEFAULT 0;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
        -- En caso de error, deshace la transacción
        ROLLBACK;
        SET p_Resultado = 0;
        SET p_Mensaje = CONCAT('Error: ', ERROR_MESSAGE());
    END;
    -- Inicializa las variables de salida
    SET p_Resultado = 1;
    SET p_Mensaje = '';
    -- Inicia la transacción
    START TRANSACTION;
    -- Inserta en la tabla VENTA
    INSERT INTO VENTA(IdUsuario, IdSucursal, TipoDocumento, NumeroDocumento, DocumentoCliente, IdCliente, MontoPago, MontoCambio, MontoTotal)
    VALUES(p_IdUsuario, p_IdSucursal, p_TipoDocumento, p_NumeroDocumento, p_DocumentoCliente, p_IdCliente, p_MontoPago, p_MontoCambio, p_MontoTotal);

    -- Obtiene el último id insertado
    SET idventa = LAST_INSERT_ID();

    -- Inserta en la tabla DETALLE_VENTA
    -- Descompón el JSON y realiza el INSERT
    INSERT INTO DETALLE_VENTA(IdVenta, IdProducto, PrecioVenta, Cantidad, SubTotal)
    SELECT
        idventa,
        JSON_EXTRACT(detail, '$.IdProducto') AS IdProducto,
        JSON_EXTRACT(detail, '$.PrecioVenta') AS PrecioVenta,
        JSON_EXTRACT(detail, '$.Cantidad') AS Cantidad,
        JSON_EXTRACT(detail, '$.SubTotal') AS SubTotal
    FROM JSON_TABLE(p_DetalleVenta, '$[*]' COLUMNS (detail JSON PATH '$')) AS details;

    -- Si todo es correcto, confirma la transacción
    COMMIT;
END //

SELECT 
    v.IdVenta, 
    u.Nombres AS NombreUsuario, 
    u.Apellidos AS ApellidoUsuario,
    v.DocumentoCliente, 
    c.Nombres AS NombreCliente, 
    c.Apellidos AS ApellidoCliente,
    s.Nombre AS NombreSucursal,
    v.TipoDocumento, 
    v.NumeroDocumento,
    v.MontoPago, 
    v.MontoCambio, 
    v.MontoTotal,
    DATE_FORMAT(v.FechaRegistro, '%d/%m/%Y') AS FechaRegistro
FROM 
    VENTA v
INNER JOIN 
    USUARIO u ON u.IdUsuario = v.IdUsuario
INNER JOIN 
    CLIENTE c ON c.IdCliente = v.IdCliente
INNER JOIN 
    SUCURSAL s ON s.IdSucursal = v.IdSucursal
WHERE 
    v.NumeroDocumento = 2024;


DROP PROCEDURE IF EXISTS usp_RegistrarVenta;

CREATE TABLE DETALLE_VENTA (
    IdDetalleVenta INT PRIMARY KEY AUTO_INCREMENT,
    IdVenta INT,
    IdProducto INT,
    PrecioVenta DECIMAL(10,2),
    Cantidad INT,
    SubTotal DECIMAL(10,2),
    FechaRegistro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (IdVenta) REFERENCES VENTA(IdVenta),
    FOREIGN KEY (IdProducto) REFERENCES PRODUCTO(IdProducto)
);

/*TABLA POR SI ACASO SINO ELIMINAMOS*/
CREATE TABLE NEGOCIO (
    IdNegocio INT PRIMARY KEY,
    Nombre VARCHAR(60),
    RUC VARCHAR(60),
    Direccion VARCHAR(60),
    Logo LONGBLOB NULL
);
/****************************************/

/*************************** CREACION DE PROCEDIMIENTOS ALMACENADOS ***************************/
/*--------------------------------------------------------------------------------------------*/
select * from USUARIO
select * from ROL

 insert into USUARIO(Documento,Nombres,Apellidos,Clave,IdRol,Estado)
 values 
 ('12345678','ADMINISTRADOR','#2','12345678',1,1)
 
   insert into PERMISO(IdRol,NombreMenu) values
  (3,'menuusuarios'),
  (3,'menumantenedor'),
  (3,'menuventas'),
  (3,'menucompras'),
  (3,'menuclientes'),
  (3,'menuproveedores'),
  (3,'menureportes'),
  (3,'menuacercade')

/*-------------------------- SP REGISTRAR PARA USUARIO ------------------------------------------------------------------*/

DELIMITER //
CREATE PROCEDURE SP_REGISTRARUSUARIO(
    IN p_Documento VARCHAR(50),
    IN p_Nombres VARCHAR(100),
    IN p_Apellidos VARCHAR(100),
    IN p_Clave VARCHAR(100),
    IN p_IdRol INT,
    IN p_Estado BIT,
    OUT p_IdUsuarioResultado INT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE userCount INT;
    SET p_IdUsuarioResultado = 0;
    SET p_Mensaje = '';

    SELECT COUNT(*) INTO userCount FROM USUARIO WHERE Documento = p_Documento;

    IF userCount = 0 THEN
        INSERT INTO USUARIO(Documento, Nombres, Apellidos, Clave, IdRol, Estado)
        VALUES (p_Documento, p_Nombres, p_Apellidos, p_Clave, p_IdRol, p_Estado);
        SET p_IdUsuarioResultado = LAST_INSERT_ID();
    ELSE
        SET p_Mensaje = 'No se puede repetir el documento para más de un usuario';
    END IF;
END //


/*-------------------------- SP EDITAR PARA USUARIO ------------------------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE SP_EDITARUSUARIO(
    IN p_IdUsuario INT,
    IN p_Documento VARCHAR(50),
    IN p_Nombres VARCHAR(100),
    IN p_Apellidos VARCHAR(100),
    IN p_Clave VARCHAR(100),
    IN p_IdRol INT,
    IN p_Estado BIT,
    OUT p_Respuesta BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE userCount INT;
    SET p_Respuesta = 0;
    SET p_Mensaje = '';

    SELECT COUNT(*) INTO userCount FROM USUARIO WHERE Documento = p_Documento AND IdUsuario != p_IdUsuario;
    IF userCount = 0 THEN
        UPDATE USUARIO
        SET Documento = p_Documento,
            Nombres = p_Nombres,
            Apellidos = p_Apellidos,
            Clave = p_Clave,
            IdRol = p_IdRol,
            Estado = p_Estado
        WHERE IdUsuario = p_IdUsuario;
        SET p_Respuesta = 1;
    ELSE
        SET p_Mensaje = 'No se puede repetir el documento para más de un usuario';
    END IF;
END //

DROP PROCEDURE IF EXISTS SP_EDITARUSUARIO;

/*-------------------------- SP ELIMINAR PARA USUARIO ------------------------------------------------------------------*/
DELIMITER //
CREATE PROCEDURE SP_ELIMINARUSUARIO(
    IN p_IdUsuario INT,
    OUT p_Respuesta BIT,
    OUT p_Mensaje VARCHAR(500)
)
BEGIN
    DECLARE pasoreglas BIT DEFAULT 1;
    SET p_Respuesta = 0;
    SET p_Mensaje = '';

    IF EXISTS (
        SELECT * FROM COMPRA C 
        INNER JOIN USUARIO U ON U.IdUsuario = C.IdUsuario
        WHERE U.IdUsuario = p_IdUsuario
    ) THEN
        SET pasoreglas = 0;
        SET p_Respuesta = 0;
        SET p_Mensaje = CONCAT(p_Mensaje, 'No se puede eliminar porque el usuario se encuentra relacionado a una COMPRA\n');
    END IF;
    
    IF EXISTS (
        SELECT * FROM VENTA V
        INNER JOIN USUARIO U ON U.IdUsuario = V.IdUsuario
        WHERE U.IdUsuario = p_IdUsuario
    ) THEN
        SET pasoreglas = 0;
        SET p_Respuesta = 0;
        SET p_Mensaje = CONCAT(p_Mensaje, 'No se puede eliminar porque el usuario se encuentra relacionado a una VENTA\n');
    END IF;
    IF pasoreglas = 1 THEN
        DELETE FROM USUARIO WHERE IdUsuario = p_IdUsuario;
        SET p_Respuesta = 1;
    END IF;
END //












